#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 24 19:10:41 2018

@author: zackmcnulty
"""
# -*- coding: utf-8 -*-
# Dallas Warren
# Washington iGEM - Simulations
# Model of chemically induced dimerization.
# Nanobody kinetic rates based on antibody kinetic rates.
# Nanobody concentrations based on a protein's average concentration in cell.
# Molecule concentration as an arbitrary number.
# Gene kinetic rates and concentrations fudged.
"""
Tellurium oscillation
"""
import numpy as np
import tellurium as te
import roadrunner
import antimony
import matplotlib.pyplot as plt
import time

r = te.loada ('''
model feedback()
  // Reactions:
  J0: Nan1 + Mol -> Nan1Mol; (K1*Nan1*Mol);
  J1: Nan1Mol -> Nan1 + Mol; (K_1*Nan1Mol); 
  J2: Nan1Mol + Nan2 -> Nan1MolNan2; (K2*Nan1Mol*Nan2)
  J3: Nan1MolNan2 + GeneOff -> GeneOn; (K3*Nan1MolNan2*GeneOff);
  //J4: GeneOn -> Nan1MolNan2 + GeneOff; (K_3*GeneOn);

  // Species initializations:
  Nan1 = 0.0001692; 
  Mol = 0.0001692/2; 
  Nan2 = 0.0001692; 
  Nan1Mol = 0;
  Nan1MolNan2 = 0; 
  GeneOff = 5*10^-5; 
  GeneOn = 0;

  // Variable initialization:
  const K1, K_1, K2, K3, K_3;
  K1 = 6.1*10^5; 
  K_1 = 8*10^-5; 
  K2 = 3.3*10^5; 
  K3 = 1*10^5; 
  K_3 = 0;
end''')

plt.subplot(2,2,1)
    
# K1
startVal = 6.1*(10**5)
rangeFactor = 0.75 # look within this percent of start value
vals = np.linspace((1-rangeFactor)*startVal, (1+rangeFactor)*startVal, 100)
for val in vals:
    r.K1 = val
    result = r.simulate(0, .5, 1000)
    r.reset();
    #plt.figure(1)
    plt.plot(result[:,0],result[:,7])

#plt.figure(1)
plt.title("Response to uncertainty in K1")
plt.legend(["GeneOn"])
plt.xlabel("Time (minutes)")
plt.ylabel("Concentration")
plt.ylim([0, 4*10**-5])
plt.xlim([0, 0.5])
#plt.show()



plt.subplot(2,2,2)

#K_1
startVal = 8*(10**-5)
rangeFactor = 0.75 # look within this percent of start value
vals = np.linspace((1-rangeFactor)*startVal, (1+rangeFactor)*startVal, 100)
for val in vals:
    r.K_1 = val
    result = r.simulate(0, .5, 1000)
    r.reset();
    #plt.figure(2)
    plt.plot(result[:,0],result[:,7])


#plt.figure(2)
plt.title("Response to uncertainty in K_1")
plt.legend(["GeneOn"])
plt.xlabel("Time (minutes)")
plt.ylabel("Concentration")
plt.ylim([0, 4*10**-5])
plt.xlim([0, 0.5])
#plt.show()




plt.subplot(2,2,3)

#K2
startVal = 3.3*(10**5)
rangeFactor = 0.75 # look within this percent of start value
vals = np.linspace((1-rangeFactor)*startVal, (1+rangeFactor)*startVal, 100)
for val in vals:
    r.K2 = val
    result = r.simulate(0, .5, 1000)
    r.reset();
    #plt.figure(3)
    plt.plot(result[:,0],result[:,7])


#plt.figure(3)
plt.title("Response to uncertainty in K2")
plt.legend(["GeneOn"])
plt.xlabel("Time (minutes)")
plt.ylabel("Concentration")
plt.ylim([0, 4*10**-5])
plt.xlim([0, 0.5])
#plt.show()



plt.subplot(2,2,4)

#K3
startVal = 1*10**5
rangeFactor = 0.75 # look within this percent of start value
vals = np.linspace((1-rangeFactor)*startVal, (1+rangeFactor)*startVal, 100)
for val in vals:
    r.K3 = val
    result = r.simulate(0, .5, 1000)
    r.reset();
    #plt.figure(4)
    plt.plot(result[:,0],result[:,7])



#plt.figure(4)
plt.title("Response to uncertainty in K3")
plt.legend(["GeneOn"])
plt.xlabel("Time (minutes)")
plt.ylabel("Concentration")
plt.ylim([0, 4*10**-5])
plt.xlim([0, 0.5])

plt.tight_layout()
plt.gcf().set_size_inches(10,10)
plt.show()



"""
#K_3
startVal = 1*10**5
rangeFactor = 0.75 # look within this percent of start value
vals = np.linspace((1-rangeFactor)*startVal, (1+rangeFactor)*startVal, 100)
for val in vals:
    r.K_3 = val
    result = r.simulate(0, .5, 1000)
    r.reset();
    plt.figure(4)
    plt.plot(result[:,0],result[:,7])
    plt.hold(True)


plt.figure(4)
plt.title("Response to uncertainty in K3")
plt.legend(["GeneOn"])
plt.xlabel("Time (minutes)")
plt.ylabel("Concentration")
plt.ylim([0, 4*10**-5])
plt.xlim([0, 0.5])
plt.show()
"""